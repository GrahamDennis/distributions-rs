use rand::Rng;

/// Type that can be used to create a random instance of `T`.
///
/// Since no state is recorded, each sample is (statistically)
/// independent of all others, assuming the `Rng` used has this
/// property.
pub trait Distribution {
    type Output;
    /// Generate a random value of `Output`, using `rng` as the
    /// source of randomness.
    fn sample<R: Rng>(&self, rng: &mut R) -> <Self as Distribution>::Output;
}

// An impl for a reference to a distribution because 'gen' and 'gen_iter' above consume
// distributions.  This way you can pass a reference to a distribution to 'gen' and 'gen_iter'.
impl <'a, D> Distribution for &'a D where D: Distribution {
    type Output = <D as Distribution>::Output;

    #[inline]
    fn sample<R: Rng>(&self, rng: &mut R) -> <Self as Distribution>::Output {
        (*self).sample(rng)
    }
}

/// Data types that have a default distribution for generating random values.
///
/// For example for integers, the default distribution is a uniform distribution over all possible
/// values.
pub trait DefaultDistribution {
    type Distribution: Distribution<Output=Self>;

    fn default_distribution() -> <Self as DefaultDistribution>::Distribution;
}

/// Data types that can be converted into a `Distribution` over type `T`.
///
/// This trait is a little different from a normal `Into` trait because the type parameter
/// isn't the type of the `Distribution` being converted into, but the type that is generated by
/// that distribution.  This is so that `gen(&mut rng, ..) -> T` will work without additional type
/// annotations for the distribution.
pub trait IntoDistribution<T>: Sized {
    type Distribution: Distribution<Output=T>;

    fn into_distribution(self) -> <Self as IntoDistribution<T>>::Distribution;
}

impl <D, T> IntoDistribution<T> for D where
    D: Distribution<Output=T>
{
    type Distribution = D;

    #[inline]
    fn into_distribution(self) -> D {
        self
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use rand::Rng;

    struct MyDistribution;

    impl Distribution for MyDistribution {
        type Output = u8;

        fn sample<R: Rng>(&self, _: &mut R) -> u8 {
            42
        }
    }

    #[test]
    fn test_distribution_into_distribution() {
        MyDistribution.into_distribution();
    }
}
